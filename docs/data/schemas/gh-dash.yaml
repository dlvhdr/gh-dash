# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id: gh-dash.schema.yaml
title: Dashboard Configuration
description: Settings for the GitHub Dashboard.
type: object
properties:
  prSections:
    title: Pull Request Sections
    description: Define sections for the dashboard's PR view.
    schematize:
      weight: 1
      details: |
        The `prSections` setting defines one or more sections to display in the dashboard's PRs
        view as tabs. Each section needs a title, which is displayed as the tab name for the
        section, and a [GitHub search filter]. The dashboard queries GitHub with the search filter
        to populate the list of PRs to display for that section.

        For more information about defining a PR section, see [sref:PR Section Options].

        [GitHub search filter]: https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests
        [sref:PR Section Options]: pr-section
      default:
        details: |
          By default, the PRs view on the dashboard has three sections:

          - The ![styled:`My Pull Requests`]() section fetches open PRs authored by you.
          - The ![styled:`Needs My Review`]() section fetches open PRs where you are a requested
            reviewer.
          - The ![styled:`Involved`]() section fetches open PRs authored by someone else and that
            meet at least one of the following criteria:

            - The PR is assigned to you.
            - The PR's body, a comment on the PR, or one of the PR's commit messages mentions you.
            - You commented on the PR.
        format: yaml
    type: array
    items:
      $ref: ./pr-section.yaml
    default:
      - title: My Pull Requests
        filters: >-
          is:open
          author:@me
      - title: Needs My Review
        filters: >-
          is:open
          review-requested:@me
      - title: Involved
        filters: >-
          is:open
          involves:@me
          -author:@me
  issuesSections:
    title: Issue Sections
    description: Define sections for the dashboard's Issues view.
    schematize:
      weight: 2
      details: |
        The `issueSections` setting defines one or more sections to display in the dashboard's
        Issues view as tabs. Each section needs a title, which is displayed as the tab name for the
        section, and a [GitHub search filter]. The dashboard queries GitHub with the search filter
        to populate the list of issues to display for that section.

        For more information about defining an issue section, see [sref:Issue Section Options].

        [GitHub search filter]: https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests
        [sref:Issue Section Options]: issue-section
      default:
        details: |
          By default, the Issues view on the dashboard has three sections:

          - The ![styled:`My Issues`]() section fetches open issues authored by you.
          - The ![styled:`Assigned`]() section fetches open issues assigned to you.
          - The ![styled:`Involved`]() section fetches open issues authored by someone else and that
            meet at least one of the following criteria:

            - The issue is assigned to you.
            - The issue's body or a comment on the issue mentions you.
            - You commented on the issue.
      format: yaml
    type: array
    items:
      $ref: ./issue-section.yaml
    default:
      - title: My Issues
        filters: >-
          is:open
          author:@me
      - title: Assigned
        filters: >-
          is:open
          assignee:@me
      - title: Involved
        filters: >-
          is:open
          involves:@me
          -author:@me
  defaults:
    $ref: ./defaults.yaml
    schematize:
      weight: 3
  repoPaths:
    title: Repo Path Map
    description: Key-value pairs that match repositories to local file paths.
    schematize:
      weight: 4
      details: |
        You can use the `repoPaths` setting to map repository names (as keys) to local paths
        (as values). This map coonfigures where to locate repositories when checking out PRs.
        
        The mappings can be exact matches, like the full name or path of a repository, or wildcard
        matches using the `owner` and a partial path.

        An exact match for the full repository name to a full path takes priority over a matching
        wildcard. Wildcard keys must match to a wildcard path.

        The `RepoName` and `RepoPath` keybinding arguments are fully expanded when sent to the
        command.
      skip_schema_render: true
      example_format: yaml
    type: object
    examples:
      - schematize:
          title: Matching Repositories
          details: |
            In this example, the first key is defined with a wildcard (`*`) as `dlvhdr/*`, so the
            dashboard will use this entry to resolve the path for any repo in the `dlvhdr`
            namespace, like [`dlvhdr/jb`] or [`dlvhdr/harbor`]. Note that the value for this key
            also uses a wildcard. If the key specifies a wildcard, the value must specify one too.
            
            If a repository in the `dlvhdr` namespace has been cloned into the `~/code/repos`
            folder, the dashboard will be able to checkout PRs for that repository locally.

            If the repository isn't found, the [checkout command] raises an error.

            The second key defines an exact mapping between the `dlvhdr/gh-dash` repository and the
            `~/code/gh-dash` folder. Because this is a non-wildcard mapping, the dashboard will use
            this value to resolve the repository path for `dlvhdr/gh-dash` even though there's also
            an entry for `dlvhdr/*`.
        dlvhdr/*: ~/code/repos/*
        dlvhdr/gh-dash: ~/code/gh-dash
    patternProperties:
      '\*$':
        type: string
        pattern: '\*$'
        title: With a Wildcard
        description: >-
          If the repo name (key) includes an asterisk, the path (value) must too.
        schematize:
          href: ends-with-wildcard
          no_pattern_in_heading: true
          weight: 1
          details: |
            If the key for an `repoPath` entry ends with a wildcard (`*`), its value must also have
            a wildcard. If a key ends with a wildcard but the value doesn't, `gh-dash` won't be
            able to correctly map repositories to folders.
      '^[^\*]+$':
        type: string
        pattern: '^[^\*]+$'
        title: Without a Wildcard
        description: >-
          If the repo name (key) doesn't include an asterisk, the path (value) can't either.
        schematize:
          href: no-asterisks
          no_pattern_in_heading: true
          weight: 2
          details: |
            If the key for an `repoPath` entry doesn't have a wildcard (`*`), its value must not
            have a wildcard. If a key ends without a wildcard but the value does, `gh-dash` won't
            be able to correctly map repositories to folders.
  keybindings:
    title: Keybindings
    description: Define keybindings to run shell commands.
    schematize:
      details: |
        Define your own custom keybindings to run shell commands using [Go templates]. You can define
        your keybindings for the PRs and Issues views separately.
      skip_schema_render: true
      example_format: yaml
      weight: 5
    type: object
    properties:
      prs:
        $ref: ./keybindings/prs.yaml
        schematize:
          weight: 1
      issues:
        $ref: ./keybindings/issues.yaml
        schematize:
          weight: 2
    examples:
      - schematize:
          title: Pin an Issue
          details: |
            This example binds ![kbd:`P`]() in the Issues view of the dashboard to the
            `gh issue pin` command to pin the selected issue in the repository.
        issues:
          - key: P
            command: gh issue pin {{ .IssueNumber }} --repo {{ .RepoName }}
      - schematize:
          title: Review PRs
          details: |
            This example binds ![kbd:`c`]() and ![kbd:`v`]() in the PRs view of the dashboard to
            checkout the selected PR and open the repository in Neovim and VS Code respectively.

            The Neovim keybinding opens the editor in another `tmux` window.
        prs:
          - key: c
            command: >
              tmux new-window -c {{.RepoPath}} '
                gh pr checkout {{.PrNumber}} &&
                nvim -c ":DiffviewOpen master...{{.HeadRefName}}"
              '
          - key: v
            command: >
              cd {{.RepoPath}} &&
              code . &&
              gh pr checkout {{.PrNumber}}
  theme:
    $ref: ./theme.yaml
    schematize:
      weight: 6
  pager:
    title: Pager
    description: Specify the pager settings to use in the dashboard.
    type: object
    schematize:
      skip_schema_render: true
      weight: 7
    properties:
      diff:
        title: Diff Pager
        description: Specifies the pager to use when diffing.
        type: string
        anyOf:
         - type: string
         - enum:
            - less
            - delta
        default: less
